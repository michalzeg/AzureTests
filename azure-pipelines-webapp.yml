# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

parameters:
  - name: stages
    type: object
    default:
      - name: Production
        displayName: Production
        variables:
          - name: ASPNETCORE_ENVIRONMENT
            value: Production


variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'AzureDefault'

  # Agent VM image name
  vmImageName: 'windows-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/WebApp'

  # 
  appName: 'WebApp'

  # App Service name in Azure
  webAppName: 'MchTestAppProduction'

trigger:
  branches:
    include:
      - main  
  paths:
    exclude:
      - 'HttpFunction/**'
      - 'AzureResourceGroup/**'
      - 'azure-pipelines-httpfunction.yml'


stages:

- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--output $(System.DefaultWorkingDirectory)/publish_output --configuration Release'
        zipAfterPublish: false
        workingDirectory: '$(workingDirectory)'
    
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output/$(appName)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- ${{each stage in parameters.stages}}:
  - stage: ${{ stage.name }} 
    displayName: 'Deploy ${{ stage.displayName}}'
    dependsOn: Build
    condition: succeeded()
    jobs:
    - deployment: Deploy
      displayName: 'Deploy ${{stage.name}}'
      environment: 'development'
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
            - ${{each var in stage.variables}}:
              - task: Bash@3
                displayName: 'Converting ${{var.name}} to env variable'
                inputs:
                  targetType: 'inline'
                  script: |
                    echo "##vso[task.setvariable variable=${{var.name}}]${{var.value}}"
            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: '$(azureSubscription)'
                appType: 'webApp'
                WebAppName: '$(webAppName)'
                packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                AppSettings: '-ASPNETCORE_ENVIRONMENT ${{stage.name}} -BuildId $(Build.BuildId)'

